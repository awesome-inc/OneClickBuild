<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <NonCSharpProject Condition="'$(Language)' != 'C#'" >true</NonCSharpProject>
    <SkipSolutionInfo Condition="'$(SkipSolutionInfo)' == '' And ('$(NonCSharpProject)' != '' Or '$(NCrunch)' !='')">true</SkipSolutionInfo>

    <!-- Disable GitVersion assembly info for non-csharp projects -->
    <UpdateAssemblyInfo Condition="'$(NonCSharpProject)' == 'true'">false</UpdateAssemblyInfo>

    <!-- Disable GitVersion during NCrunch, cf.: https://github.com/GitTools/GitVersion/issues/11#issuecomment-198669861 -->
    <UpdateAssemblyInfo Condition="'$(NCrunch)' == '1'">false</UpdateAssemblyInfo>
    <GetVersion Condition="'$(NCrunch)' == '1'">false</GetVersion>

    <!-- Use AppVeyor Build-Number, cf.: http://www.appveyor.com/docs/environment-variables -->
    <Build Condition="'$(CI)' == 'True'">$(APPVEYOR_BUILD_NUMBER)</Build>
    <!-- Use Build-Number from Jenkins or TeamCity -->
    <Build Condition="'$(BUILD_NUMBER)' != ''">$(BUILD_NUMBER)</Build>
    <!-- Use Build-Number from Gitlab < 9.0-->
    <Build Condition="'$(CI_BUILD_ID)' != ''">$(CI_BUILD_ID)</Build>
    <!-- Use Build-Number from Gitlab -->
    <Build Condition="'$(CI_JOB_ID)' != ''">$(CI_JOB_ID)</Build>
    <!-- Fallback to "0" if still not set -->
    <Build Condition="'$(Build)' == ''">0</Build>
    <DeployFailOnBuildNotSet Condition="'$(DeployFailOnBuildNotSet)' == ''">true</DeployFailOnBuildNotSet>

    <NuspecFile Condition="'$(NuspecFile)'==''">$(ProjectDir)Package.nuspec</NuspecFile>
    <NuGetSourceToDeploy Condition="'$(NuGetSourceToDeploy)'==''">https://www.nuget.org</NuGetSourceToDeploy>

    <ContinueOnError Condition="'$(ContinueOnError)' == ''">false</ContinueOnError>

  </PropertyGroup>

  <!-- Targets -->
  <Target Name="Test" DependsOnTargets="Build;TestWithNunit"/>
  <Target Name="Coverage" DependsOnTargets="Build;OpenCoverWithNUnit"/>

  <Target Name="CoverageReport" DependsOnTargets="Coverage;OpenCoverReport"/>
  <Target Name="CoverageUpload" DependsOnTargets="Coverage;CoverAllsUpload"/>
  <Target Name="Package" DependsOnTargets="Build;PackageWithNuGet"/>
  <Target Name="Deploy" DependsOnTargets="Build;Package;DeployWithNuGet;Publish"/>

  <!-- ClickOnce Versioning -->
  <Target Name="SetClickOnceVersion"
    Condition="'$(ApplicationVersion)'=='' And '$(NCrunch)' != '1'"
    DependsOnTargets="GetVersion"
    BeforeTargets="_DeploymentComputeClickOnceManifestInfo">
    <PropertyGroup>
      <RevisionNumber Condition="'$(ApplicationRevision)'!=''">$(ApplicationRevision)</RevisionNumber>
      <RevisionNumber Condition="'$(ApplicationRevision)'==''">$(Build)</RevisionNumber>
    </PropertyGroup>
    <CreateProperty Value="$(GitVersion_MajorMinorPatch).$(RevisionNumber)">
      <Output TaskParameter="Value" PropertyName="ApplicationVersion"/>
    </CreateProperty>
    <!-- for VSTO -->
    <CreateProperty Value="$(ApplicationVersion)">
      <Output TaskParameter="Value" PropertyName="PublishVersion"/>
    </CreateProperty>
    <Message Text="ClickOnce ApplicationVersion: $(ApplicationVersion)" Importance="High" />
  </Target>

  <!-- NuGet -->
  <Target Name="PackageWithNuGet" DependsOnTargets="Build;GetVersion">
    <PropertyGroup>
      <Revision>$(GitVersion_Sha)</Revision>
      <PackageVersion Condition="'$(PackageVersion)'==''">$(GitVersion_NuGetVersion)</PackageVersion>
    </PropertyGroup>

    <Message Importance="Normal" Condition="!Exists($(NuspecFile))" Text="Skipping target because .nuspec-file is missing (expected '$(NuspecFile)')" />
    <Exec Condition="Exists($(NuspecFile))"
          ContinueOnError="$(ContinueOnError)"
          Command="nuget pack $(NuspecFile) -Properties Version=$(PackageVersion);Revision=$(Revision);Configuration=$(Configuration)"/>
  </Target>

  <Target Name="DeployWithNuGet" DependsOnTargets="PackageWithNuGet">
    <Error Condition="'$(Build)' == '0' And '$(DeployFailOnBuildNotSet)' != 'false'" Text="Build number not set. See the OneClickBuild README."/>

    <PropertyGroup>
      <PackageVersion Condition="'$(PackageVersion)'==''">$(GitVersion_NuGetVersion)</PackageVersion>
      <PackageId Condition="'$(PackageId)'=='' And Exists('$(ProjectName).$(PackageVersion).nupkg')">$(ProjectName)</PackageId>
      <PackageId Condition="'$(PackageId)'=='' And Exists('$(AssemblyName).$(PackageVersion).nupkg')">$(AssemblyName)</PackageId>
      <PackageId Condition="'$(PackageId)'=='' And Exists('$(RootNamespace).$(PackageVersion).nupkg')">$(RootNamespace)</PackageId>
      <PackageFile>$(PackageId).$(PackageVersion).nupkg</PackageFile>
    </PropertyGroup>

    <Message Condition="!Exists($(PackageFile))" Text="Skipping target because package file '$(PackageFile)' has not been built for project '$(ProjectName)'" Importance="Normal"  />
    <!-- To set API key use "NuGet.exe setApiKey <key> -Source <source>" -->
    <Message Condition="'$(PackageFile)'!='' And Exists($(PackageFile))" Text="Pushing package $(PackageFile) to $(NuGetSourceToDeploy)..." Importance="High"  />
    <Exec Condition="'$(PackageFile)'!='' And Exists($(PackageFile))"
          ContinueOnError="$(ContinueOnError)"
          Command="nuget push $(PackageFile) -Source $(NuGetSourceToDeploy) > NUL" />
  </Target>

  <!-- NUnit -->
  <PropertyGroup>
    <TestsProjectPattern Condition="'$(TestsProjectPattern)' == '' And $(OutputType.EndsWith('Exe'))">$(OutDir)$(AssemblyName).exe</TestsProjectPattern>
    <TestsProjectPattern Condition="'$(TestsProjectPattern)' == '' And '$(OutputType)' == 'Library'">$(OutDir)$(AssemblyName).dll</TestsProjectPattern>
    <TestResultsDir Condition="'$(TestResultsDir)' == ''">$(SolutionDir)testresults\</TestResultsDir>
    <TestResults Condition="'$(TestResults)' == ''">$(TestResultsDir)$(ProjectName).Tests.xml</TestResults>
    <!-- NUnit verbosity: Off|Error|Warning|Info|Verbose-->
    <TestVerbosity Condition="'$(TestVerbosity)' == ''">Off</TestVerbosity>
  </PropertyGroup>

  <Target Name="TestWithNunit" DependsOnTargets="PrepareTests;SelectNUnitConsole;_TestWithNunit" />

  <Target Name="_TestWithNunit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <NUnitResultFormat Condition="'$(NUnitResultFormat)' == ''">nunit2</NUnitResultFormat>
      <NUnitArgs Condition="'$(NUnitArgs)' == ''">/trace=$(TestVerbosity)</NUnitArgs>
      <Nunit3Args Condition="'$(UseNUnit2)' != 'true'">--result:TestResult.xml;format=$(NUnitResultFormat)</Nunit3Args>
      <Nunit2Args Condition="'$(UseNUnit2)' == 'true'">/nologo /nodots /noshadow /domain=single</Nunit2Args>
      <_NunitArgs>$(NUnitArgs) $(NUnit2Args) $(Nunit3Args)</_NunitArgs>
    </PropertyGroup>

    <Exec WorkingDirectory="$(OutDir)"
          ContinueOnError="$(ContinueOnError)"
          Command="&quot;@(NUnitConsole->'%(FullPath)')&quot; $(_NunitArgs) @(TestAssemblies, ' ')" />
    <Move SourceFiles="$(OutDir)TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>

  <Target Name="SelectNUnitConsole" Condition="'@(NUnitConsole)'==''">
    <PropertyGroup>
      <NUnitPath Condition="'$(UseNUnit2)' != 'true'">$(SolutionDir)packages\NUnit.Console*\tools\nunit3-console.exe</NUnitPath>
      <NUnitPath Condition="'$(UseNUnit2)' == 'true' And '$(PlatformTarget)' == 'x86'">$(SolutionDir)packages\NUnit.*\tools\nunit-console-x86.exe</NUnitPath>
      <NUnitPath Condition="'$(UseNUnit2)' == 'true' And '$(PlatformTarget)' != 'x86'">$(SolutionDir)packages\NUnit.*\tools\nunit-console.exe</NUnitPath>
    </PropertyGroup>

    <!--Ensure installed -->
    <ItemGroup>
      <AnyNUnitConsole Include="$(NUnitPath)"/>
    </ItemGroup>
    <Exec Condition="'@(AnyNUnitConsole)'==''"
          ContinueOnError="$(ContinueOnError)" Command="nuget install NUnit.Console -o $(SolutionDir)packages" />

    <!-- Select most recent NUnit console -->
    <ItemGroup>
      <NUnitConsoleFiles Include="$(NUnitPath)"/>
    </ItemGroup>
    <GetLatest Files="@(NUnitConsoleFiles)">
      <Output TaskParameter="Result" ItemName="NUnitConsole"/>
    </GetLatest>
  </Target>


  <!--XUnit -->
  <Target Name="TestWithXunit" DependsOnTargets="PrepareTests;SelectXUnitConsole;_TestWithXunit" />

  <Target Name="_TestWithXunit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <XUnitArgs Condition="'$(XUnitArgs)' == ''">-nologo -noappdomain -noshadow -nunit TestResult.xml</XUnitArgs>
    </PropertyGroup>

    <Exec WorkingDirectory="$(OutDir)"
          ContinueOnError="$(ContinueOnError)"
          Command="&quot;@(XUnitConsole->'%(FullPath)')&quot; @(TestAssemblies, ' ') $(XunitArgs)" />
    <Move SourceFiles="$(OutDir)TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>

  <Target Name="SelectXUnitConsole" Condition="'@(XUnitConsole)'==''">
    <PropertyGroup>
      <XUnitPath Condition="'$(PlatformTarget)' == 'x86'">$(SolutionDir)packages\xunit.runner.console.*\tools\**\xunit.console.x86.exe</XUnitPath>
      <XUnitPath Condition="'$(PlatformTarget)' != 'x86'">$(SolutionDir)packages\xunit.runner.console.*\tools\**\xunit.console.exe</XUnitPath>
    </PropertyGroup>

    <!--Ensure installed -->
    <ItemGroup>
      <AnyXUnitConsole Include="$(XUnitPath)"/>
    </ItemGroup>
    <Exec Condition="'@(AnyXUnitConsole)'==''"
          ContinueOnError="$(ContinueOnError)" Command="nuget install xunit.runner.console -o $(SolutionDir)packages" />

    <!-- Select most recent -->
    <ItemGroup>
      <XUnitConsoleFiles Include="$(XUnitPath)"/>
    </ItemGroup>
    <GetLatest Files="@(XUnitConsoleFiles)">
      <Output TaskParameter="Result" ItemName="XUnitConsole"/>
    </GetLatest>
  </Target>


  <!-- OpenCover -->
  <PropertyGroup>
    <OpenCoverFilter Condition="'$(OpenCoverFilter)' == ''">+[$(AssemblyName)]* -[*]*Tests -[FluentAssertions]*</OpenCoverFilter>
    <OpenCoverOutput>$(TestResultsDir)$(ProjectName).Coverage.xml</OpenCoverOutput>
    <!-- exclude generated code -->
    <!-- [ExcludeFromCodeCoverage] cf.: https://github.com/OpenCover/opencover/issues/195 -->
    <OpenCoverExcludeAttributes Condition="'$(OpenCoverExcludeAttributes)' == ''">*DebuggerNonUserCode*;*.GeneratedCode*;*.ExcludeFromCodeCoverage*</OpenCoverExcludeAttributes>
    <OpenCoverExcludeFiles Condition="'$(OpenCoverExcludeFiles)' == ''">*\*.g.cs</OpenCoverExcludeFiles>
    <CoverageFailOnTargetFail Condition="'$(CoverageFailOnTargetFail)' == ''">true</CoverageFailOnTargetFail>
    <CoverageReportDir>$(TestResultsDir)coverage\$(ProjectName)</CoverageReportDir>
    <!--OpenCover verbosity: Off|Fatal|Error|Warn|Info|Debug|Verbose|All -->
    <CoverageVerbosity Condition="'$(CoverageVerbosity)' == ''">Warn</CoverageVerbosity>
    <!-- ReportGenerator Verbosity: Verbose|Info|Error -->
    <CoverageReportVerbosity Condition="'$(CoverageReportVerbosity)' == ''">Error</CoverageReportVerbosity>
  </PropertyGroup>

  <Target Name="OpenCoverWithNUnit"
          DependsOnTargets="PrepareTests;SelectNUnitConsole;SelectOpenCoverConsole;_OpenCoverWithNUnit">
  </Target>

  <Target Name="_OpenCoverWithNUnit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <!-- Skip register profiler per user if run by System account -->
      <RegisterProfiler Condition="!$(USERPROFILE.EndsWith('systemprofile'))">-register:user</RegisterProfiler>
      <RegisterProfiler Condition="$(USERPROFILE.EndsWith('systemprofile'))">-register</RegisterProfiler>
      <ReturnTargetCode Condition="'$(CoverageFailOnTargetFail)' == 'true'">-returntargetcode</ReturnTargetCode>
      <OpenCoverArgs>$(RegisterProfiler) -filter:&quot;$(OpenCoverFilter)&quot; -output:&quot;$(OpenCoverOutput)&quot; -nodefaultfilters -mergebyhash -skipautoprops $(ReturnTargetCode) -excludebyattribute:&quot;$(OpenCoverExcludeAttributes)&quot; -excludebyfile:&quot;$(OpenCoverExcludeFiles)&quot; -log:$(CoverageVerbosity)</OpenCoverArgs>

      <NUnitResultFormat Condition="'$(NUnitResultFormat)' == ''">nunit2</NUnitResultFormat>
      <NUnitArgs Condition="'$(NUnitArgs)' == ''">/trace=$(TestVerbosity)</NUnitArgs>
      <Nunit3Args Condition="'$(UseNUnit2)' != 'true'">--result:TestResult.xml;format=$(NUnitResultFormat)</Nunit3Args>
      <Nunit2Args Condition="'$(UseNUnit2)' == 'true'">/nologo /nodots /noshadow /domain=single</Nunit2Args>
      <_NunitArgs>$(NUnitArgs) $(NUnit2Args) $(Nunit3Args)</_NunitArgs>
    </PropertyGroup>

    <Exec WorkingDirectory="$(OutDir)"
          IgnoreStandardErrorWarningFormat="true"
          ContinueOnError="$(ContinueOnError)"
          Command="&quot;@(OpenCoverConsole->'%(FullPath)')&quot; $(OpenCoverArgs) -target:&quot;@(NUnitConsole->'%(FullPath)')&quot; -targetdir:. -targetargs:&quot;$(_NunitArgs) @(TestAssemblies, ' ')&quot;" />
    <Move SourceFiles="$(OutDir)TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>

  <Target Name="OpenCoverWithXUnit"
          DependsOnTargets="PrepareTests;SelectXUnitConsole;SelectOpenCoverConsole;_OpenCoverWithXUnit">
  </Target>

  <Target Name="_OpenCoverWithXUnit" Condition="'@(TestAssemblies)' != ''">
    <PropertyGroup>
      <!-- Skip register profiler per user if run by System account -->
      <RegisterProfiler Condition="!$(USERPROFILE.EndsWith('systemprofile'))">-register:user</RegisterProfiler>
      <RegisterProfiler Condition="$(USERPROFILE.EndsWith('systemprofile'))">-register</RegisterProfiler>
      <ReturnTargetCode Condition="'$(CoverageFailOnTargetFail)' == 'true'">-returntargetcode</ReturnTargetCode>
      <OpenCoverArgs>$(RegisterProfiler) -filter:&quot;$(OpenCoverFilter)&quot; -output:&quot;$(OpenCoverOutput)&quot; -nodefaultfilters -mergebyhash -skipautoprops $(ReturnTargetCode) -excludebyattribute:&quot;$(OpenCoverExcludeAttributes)&quot; -excludebyfile:&quot;$(OpenCoverExcludeFiles)&quot; -log:$(CoverageVerbosity)</OpenCoverArgs>
      <XUnitArgs Condition="'$(XUnitArgs)' == ''">-nologo -noappdomain -noshadow -nunit TestResult.xml</XUnitArgs>
    </PropertyGroup>

    <Exec WorkingDirectory="$(OutDir)"
          IgnoreStandardErrorWarningFormat="true"
          ContinueOnError="$(ContinueOnError)"
          Command="&quot;@(OpenCoverConsole->'%(FullPath)')&quot; $(OpenCoverArgs) -target:&quot;@(XUnitConsole->'%(FullPath)')&quot; -targetdir:. -targetargs:&quot;@(TestAssemblies, ' ') $(XunitArgs)&quot;" />
    <Move SourceFiles="$(OutDir)TestResult.xml" DestinationFiles="$(TestResults)"/>
  </Target>


  <Target Name="SelectOpenCoverConsole" Condition="'@(OpenCoverConsole)'==''">
    <PropertyGroup>
      <_OpenCoverPath>$(SolutionDir)packages\OpenCover.*\tools\OpenCover.Console.exe</_OpenCoverPath>
    </PropertyGroup>

    <!--Ensure installed -->
    <ItemGroup>
      <AnyOpenCover Include="$(_OpenCoverPath)"/>
    </ItemGroup>
    <Exec Condition="'@(AnyOpenCover)'==''"
          ContinueOnError="$(ContinueOnError)" Command="nuget install OpenCover -o $(SolutionDir)packages" />

    <!-- Select most recent -->
    <ItemGroup>
      <OpenCoverConsoleFiles Include="$(_OpenCoverPath)"/>
    </ItemGroup>
    <GetLatest Files="@(OpenCoverConsoleFiles)">
      <Output TaskParameter="Result" ItemName="OpenCoverConsole"/>
    </GetLatest>
  </Target>


  <!-- Coverage Report -->
  <Target Name="OpenCoverReport" DependsOnTargets="Coverage;PrepareCoverageReport;SelectReportGenerator">
    <PropertyGroup>
      <ReportGeneratorArgs>-reports:$(OpenCoverOutput) -targetdir:$(CoverageReportDir) -verbosity:$(CoverageReportVerbosity)</ReportGeneratorArgs>
    </PropertyGroup>
    <Message Condition="'@(TestAssemblies)' == ''"
         Text="Skipping target since no test assemblies to report coverage on" />
    <Exec Condition="'@(TestAssemblies)' != ''"
          ContinueOnError="$(ContinueOnError)"
          Command="&quot;@(ReportGenerator->'%(FullPath)')&quot; $(ReportGeneratorArgs)"
          WorkingDirectory="$(OutDir)" />
  </Target>

  <Target Name="SelectReportGenerator" Condition="'@(ReportGenerator)'==''">
    <PropertyGroup>
      <_ReportGeneratorPath>$(SolutionDir)packages\ReportGenerator.*\tools\ReportGenerator.exe</_ReportGeneratorPath>
    </PropertyGroup>

    <!--Ensure installed -->
    <ItemGroup>
      <AnyReportGenerator Include="$(_ReportGeneratorPath)"/>
    </ItemGroup>
    <Exec Condition="'@(AnyReportGenerator)'==''"
          ContinueOnError="$(ContinueOnError)" Command="nuget install ReportGenerator -o $(SolutionDir)packages" />

    <!-- Select most recent -->
    <ItemGroup>
      <ReportGeneratorFiles Include="$(_ReportGeneratorPath)"/>
    </ItemGroup>
    <GetLatest Files="@(ReportGeneratorFiles)">
      <Output TaskParameter="Result" ItemName="ReportGenerator"/>
    </GetLatest>
  </Target>

  <!-- Coverage Upload -->
  <Target Name="CoverAllsUpload" DependsOnTargets="Coverage;SelectCoverAllsUploader">

    <Error Condition="'$(CoverallsToken)' == ''" Text="CoverAllsToken not set. See the OneClickBuild README."/>

    <PropertyGroup>
      <CoverallsUploaderOptions Condition="'$(CoverallsUploaderOptions)' == ''">--opencover *.Coverage.xml --repo-token $(CoverallsToken)</CoverallsUploaderOptions>
    </PropertyGroup>

    <Exec Command="&quot;@(CoverAllsUploader->'%(FullPath)')&quot; $(CoverallsUploaderOptions)"
          ContinueOnError="$(ContinueOnError)"
          WorkingDirectory="$(TestResultsDir)"
          Condition="Exists($(OpenCoverOutput))"/>

  </Target>

  <Target Name="SelectCoverAllsUploader" Condition="'@(CoverAllsUploader)'==''">
    <PropertyGroup>
      <_CoverAllsPath>$(SolutionDir)packages\coveralls.io.*\tools\coveralls.net.exe</_CoverAllsPath>
    </PropertyGroup>

    <!--Ensure installed -->
    <ItemGroup>
      <AnyCoverAlls Include="$(_CoverAllsPath)"/>
    </ItemGroup>
    <Exec Condition="'@(AnyCoverAlls)'==''"
          ContinueOnError="$(ContinueOnError)" Command="nuget install coveralls.io -o $(SolutionDir)packages" />

    <!-- Select most recent -->
    <ItemGroup>
      <CoverAllsUploaderFiles Include="$(_CoverAllsPath)"/>
    </ItemGroup>
    <GetLatest Files="@(CoverAllsUploaderFiles)">
      <Output TaskParameter="Result" ItemName="CoverAllsUploader"/>
    </GetLatest>
  </Target>


  <!-- Helper targets -->
  <!-- helper target to get the names of the assemblies to test -->
  <Target Name="GetTestAssemblies" DependsOnTargets="Build">
    <ItemGroup Condition="'@(TestAssemblies)' == ''">
      <TestAssembliesWithPath Include="$(TestsProjectPattern)"/>
      <TestAssemblies Include="@(TestAssembliesWithPath->'%(Filename)%(Extension)')"/>
    </ItemGroup>
  </Target>
  <!-- helper target to create a directory for the project test results -->
  <Target Name="PrepareTests" DependsOnTargets="GetTestAssemblies">
    <MakeDir Directories="$(TestResultsDir)" Condition="'@(TestAssemblies)' != '' And !Exists($(TestResultsDir))"/>
  </Target>
  <!-- helper target to create a directory for the project test coverage results -->
  <Target Name="PrepareCoverageReport" Condition="'@(TestAssemblies)' != ''">
    <MakeDir Directories="$(CoverageReportDir)" Condition="!Exists($(CoverageReportDir))"/>
    <Delete Files="$(CoverageReportDir)" />
  </Target>

  <!-- import custom user solution targets -->
  <Target Name="EnsureOneClickBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <WarningText>OneClickBuild has not yet been initialized for this solution. Use ...</WarningText>
    </PropertyGroup>
    <Warning Condition="!Exists('$(SolutionDir)\solution.targets')" Text="$(WarningText)" />
  </Target>

  <!-- Helper task to select newest tool file in case there are mixed packages installed -->
  <PropertyGroup>
    <CodeTaskFactoryDll Condition="$(MSBuildToolsVersion) &lt; 14">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryDll>
    <CodeTaskFactoryDll Condition="$(MSBuildToolsVersion) &gt;= 14">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryDll>
  </PropertyGroup>
  <UsingTask TaskName="GetLatest" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryDll)">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Result = Files.LastOrDefault();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Import Project="$(SolutionDir)\solution.targets" Condition="Exists('$(SolutionDir)\solution.targets')" />
</Project>
